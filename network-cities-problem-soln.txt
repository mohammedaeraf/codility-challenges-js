A town-network consisting of N towns and N-1 roads connecting them is given. Cities are labeled with distinct integers within the range[0..(N-1)]

Roads connect towns in such a way that each pair of distinct towns is connected either by a direct road or along a path consisting of direct roads. There is exactly one way to reach any town from any other town. In other words, towns and direct roads from a tree. The number of direct roads that must be traversed is called the distance between these two towns.

Write a function that, given a non-empty zero-indexed array T consisting of N integers describing a network of N towns and N-1 roads, returns an array consisting of N-1 integers, specifying the number of towns positioned at each distance 1, 2, ..., N-1.

Array T describes a network of towns as follows:

If T[P] = Q and P = Q, then P is the capital;
If T[P] = Q and P != Q, then there is a direct road between towns P and Q

For example, given the following array T consisting of ten elements:
T[0] = 9 T[1] = 1 T[2] = 4
T[3] = 9 T[4] = 0 T[5] = 4
T[6] = 8 T[7] = 9 T[8] = 0 T[9] = 1

the function should return [1,3,2,3,0,0,0,0,0], as explained above.

Assume that:
N is an integer within the range [1..100,000]
Each element of array T is an integer within the range [0..N-1]
There is exactly one (possibly indirect) connection between any two distinct towns
Complexity:
Expected worst-case time complexity is O(N)
Expected worst-case space complexity is O(N), beyond input storage(not counting the storage required for input arguments)

https://maksimdan.gitbook.io/interview-practice-problems/leetcode_sessions/trees-and-graphs/number-of-towns-at-each-distance

